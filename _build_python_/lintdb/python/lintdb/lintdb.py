# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pylintdb
else:
    import _pylintdb

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pylintdb.delete_SwigPyIterator

    def value(self):
        return _pylintdb.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _pylintdb.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _pylintdb.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _pylintdb.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _pylintdb.SwigPyIterator_equal(self, x)

    def copy(self):
        return _pylintdb.SwigPyIterator_copy(self)

    def next(self):
        return _pylintdb.SwigPyIterator_next(self)

    def __next__(self):
        return _pylintdb.SwigPyIterator___next__(self)

    def previous(self):
        return _pylintdb.SwigPyIterator_previous(self)

    def advance(self, n):
        return _pylintdb.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _pylintdb.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _pylintdb.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _pylintdb.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _pylintdb.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _pylintdb.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _pylintdb.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _pylintdb:
_pylintdb.SwigPyIterator_swigregister(SwigPyIterator)

class FloatVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pylintdb.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pylintdb.FloatVector___nonzero__(self)

    def __bool__(self):
        return _pylintdb.FloatVector___bool__(self)

    def __len__(self):
        return _pylintdb.FloatVector___len__(self)

    def __getslice__(self, i, j):
        return _pylintdb.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pylintdb.FloatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pylintdb.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pylintdb.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pylintdb.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pylintdb.FloatVector___setitem__(self, *args)

    def pop(self):
        return _pylintdb.FloatVector_pop(self)

    def append(self, x):
        return _pylintdb.FloatVector_append(self, x)

    def empty(self):
        return _pylintdb.FloatVector_empty(self)

    def size(self):
        return _pylintdb.FloatVector_size(self)

    def swap(self, v):
        return _pylintdb.FloatVector_swap(self, v)

    def begin(self):
        return _pylintdb.FloatVector_begin(self)

    def end(self):
        return _pylintdb.FloatVector_end(self)

    def rbegin(self):
        return _pylintdb.FloatVector_rbegin(self)

    def rend(self):
        return _pylintdb.FloatVector_rend(self)

    def clear(self):
        return _pylintdb.FloatVector_clear(self)

    def get_allocator(self):
        return _pylintdb.FloatVector_get_allocator(self)

    def pop_back(self):
        return _pylintdb.FloatVector_pop_back(self)

    def erase(self, *args):
        return _pylintdb.FloatVector_erase(self, *args)

    def __init__(self, *args):
        _pylintdb.FloatVector_swiginit(self, _pylintdb.new_FloatVector(*args))

    def push_back(self, x):
        return _pylintdb.FloatVector_push_back(self, x)

    def front(self):
        return _pylintdb.FloatVector_front(self)

    def back(self):
        return _pylintdb.FloatVector_back(self)

    def assign(self, n, x):
        return _pylintdb.FloatVector_assign(self, n, x)

    def resize(self, *args):
        return _pylintdb.FloatVector_resize(self, *args)

    def insert(self, *args):
        return _pylintdb.FloatVector_insert(self, *args)

    def reserve(self, n):
        return _pylintdb.FloatVector_reserve(self, n)

    def capacity(self):
        return _pylintdb.FloatVector_capacity(self)
    __swig_destroy__ = _pylintdb.delete_FloatVector

# Register FloatVector in _pylintdb:
_pylintdb.FloatVector_swigregister(FloatVector)

class IdxVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pylintdb.IdxVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pylintdb.IdxVector___nonzero__(self)

    def __bool__(self):
        return _pylintdb.IdxVector___bool__(self)

    def __len__(self):
        return _pylintdb.IdxVector___len__(self)

    def __getslice__(self, i, j):
        return _pylintdb.IdxVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pylintdb.IdxVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pylintdb.IdxVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pylintdb.IdxVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pylintdb.IdxVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pylintdb.IdxVector___setitem__(self, *args)

    def pop(self):
        return _pylintdb.IdxVector_pop(self)

    def append(self, x):
        return _pylintdb.IdxVector_append(self, x)

    def empty(self):
        return _pylintdb.IdxVector_empty(self)

    def size(self):
        return _pylintdb.IdxVector_size(self)

    def swap(self, v):
        return _pylintdb.IdxVector_swap(self, v)

    def begin(self):
        return _pylintdb.IdxVector_begin(self)

    def end(self):
        return _pylintdb.IdxVector_end(self)

    def rbegin(self):
        return _pylintdb.IdxVector_rbegin(self)

    def rend(self):
        return _pylintdb.IdxVector_rend(self)

    def clear(self):
        return _pylintdb.IdxVector_clear(self)

    def get_allocator(self):
        return _pylintdb.IdxVector_get_allocator(self)

    def pop_back(self):
        return _pylintdb.IdxVector_pop_back(self)

    def erase(self, *args):
        return _pylintdb.IdxVector_erase(self, *args)

    def __init__(self, *args):
        _pylintdb.IdxVector_swiginit(self, _pylintdb.new_IdxVector(*args))

    def push_back(self, x):
        return _pylintdb.IdxVector_push_back(self, x)

    def front(self):
        return _pylintdb.IdxVector_front(self)

    def back(self):
        return _pylintdb.IdxVector_back(self)

    def assign(self, n, x):
        return _pylintdb.IdxVector_assign(self, n, x)

    def resize(self, *args):
        return _pylintdb.IdxVector_resize(self, *args)

    def insert(self, *args):
        return _pylintdb.IdxVector_insert(self, *args)

    def reserve(self, n):
        return _pylintdb.IdxVector_reserve(self, n)

    def capacity(self):
        return _pylintdb.IdxVector_capacity(self)
    __swig_destroy__ = _pylintdb.delete_IdxVector

# Register IdxVector in _pylintdb:
_pylintdb.IdxVector_swigregister(IdxVector)

class RawPassageVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pylintdb.RawPassageVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pylintdb.RawPassageVector___nonzero__(self)

    def __bool__(self):
        return _pylintdb.RawPassageVector___bool__(self)

    def __len__(self):
        return _pylintdb.RawPassageVector___len__(self)

    def __getslice__(self, i, j):
        return _pylintdb.RawPassageVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pylintdb.RawPassageVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pylintdb.RawPassageVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pylintdb.RawPassageVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pylintdb.RawPassageVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pylintdb.RawPassageVector___setitem__(self, *args)

    def pop(self):
        return _pylintdb.RawPassageVector_pop(self)

    def append(self, x):
        return _pylintdb.RawPassageVector_append(self, x)

    def empty(self):
        return _pylintdb.RawPassageVector_empty(self)

    def size(self):
        return _pylintdb.RawPassageVector_size(self)

    def swap(self, v):
        return _pylintdb.RawPassageVector_swap(self, v)

    def begin(self):
        return _pylintdb.RawPassageVector_begin(self)

    def end(self):
        return _pylintdb.RawPassageVector_end(self)

    def rbegin(self):
        return _pylintdb.RawPassageVector_rbegin(self)

    def rend(self):
        return _pylintdb.RawPassageVector_rend(self)

    def clear(self):
        return _pylintdb.RawPassageVector_clear(self)

    def get_allocator(self):
        return _pylintdb.RawPassageVector_get_allocator(self)

    def pop_back(self):
        return _pylintdb.RawPassageVector_pop_back(self)

    def erase(self, *args):
        return _pylintdb.RawPassageVector_erase(self, *args)

    def __init__(self, *args):
        _pylintdb.RawPassageVector_swiginit(self, _pylintdb.new_RawPassageVector(*args))

    def push_back(self, x):
        return _pylintdb.RawPassageVector_push_back(self, x)

    def front(self):
        return _pylintdb.RawPassageVector_front(self)

    def back(self):
        return _pylintdb.RawPassageVector_back(self)

    def assign(self, n, x):
        return _pylintdb.RawPassageVector_assign(self, n, x)

    def resize(self, *args):
        return _pylintdb.RawPassageVector_resize(self, *args)

    def insert(self, *args):
        return _pylintdb.RawPassageVector_insert(self, *args)

    def reserve(self, n):
        return _pylintdb.RawPassageVector_reserve(self, n)

    def capacity(self):
        return _pylintdb.RawPassageVector_capacity(self)
    __swig_destroy__ = _pylintdb.delete_RawPassageVector

# Register RawPassageVector in _pylintdb:
_pylintdb.RawPassageVector_swigregister(RawPassageVector)

class RawPassagePtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pylintdb.RawPassagePtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pylintdb.RawPassagePtrVector___nonzero__(self)

    def __bool__(self):
        return _pylintdb.RawPassagePtrVector___bool__(self)

    def __len__(self):
        return _pylintdb.RawPassagePtrVector___len__(self)

    def __getslice__(self, i, j):
        return _pylintdb.RawPassagePtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pylintdb.RawPassagePtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pylintdb.RawPassagePtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pylintdb.RawPassagePtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pylintdb.RawPassagePtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pylintdb.RawPassagePtrVector___setitem__(self, *args)

    def pop(self):
        return _pylintdb.RawPassagePtrVector_pop(self)

    def append(self, x):
        return _pylintdb.RawPassagePtrVector_append(self, x)

    def empty(self):
        return _pylintdb.RawPassagePtrVector_empty(self)

    def size(self):
        return _pylintdb.RawPassagePtrVector_size(self)

    def swap(self, v):
        return _pylintdb.RawPassagePtrVector_swap(self, v)

    def begin(self):
        return _pylintdb.RawPassagePtrVector_begin(self)

    def end(self):
        return _pylintdb.RawPassagePtrVector_end(self)

    def rbegin(self):
        return _pylintdb.RawPassagePtrVector_rbegin(self)

    def rend(self):
        return _pylintdb.RawPassagePtrVector_rend(self)

    def clear(self):
        return _pylintdb.RawPassagePtrVector_clear(self)

    def get_allocator(self):
        return _pylintdb.RawPassagePtrVector_get_allocator(self)

    def pop_back(self):
        return _pylintdb.RawPassagePtrVector_pop_back(self)

    def erase(self, *args):
        return _pylintdb.RawPassagePtrVector_erase(self, *args)

    def __init__(self, *args):
        _pylintdb.RawPassagePtrVector_swiginit(self, _pylintdb.new_RawPassagePtrVector(*args))

    def push_back(self, x):
        return _pylintdb.RawPassagePtrVector_push_back(self, x)

    def front(self):
        return _pylintdb.RawPassagePtrVector_front(self)

    def back(self):
        return _pylintdb.RawPassagePtrVector_back(self)

    def assign(self, n, x):
        return _pylintdb.RawPassagePtrVector_assign(self, n, x)

    def resize(self, *args):
        return _pylintdb.RawPassagePtrVector_resize(self, *args)

    def insert(self, *args):
        return _pylintdb.RawPassagePtrVector_insert(self, *args)

    def reserve(self, n):
        return _pylintdb.RawPassagePtrVector_reserve(self, n)

    def capacity(self):
        return _pylintdb.RawPassagePtrVector_capacity(self)
    __swig_destroy__ = _pylintdb.delete_RawPassagePtrVector

# Register RawPassagePtrVector in _pylintdb:
_pylintdb.RawPassagePtrVector_swigregister(RawPassagePtrVector)

class RawPassageConstPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pylintdb.RawPassageConstPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pylintdb.RawPassageConstPtrVector___nonzero__(self)

    def __bool__(self):
        return _pylintdb.RawPassageConstPtrVector___bool__(self)

    def __len__(self):
        return _pylintdb.RawPassageConstPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _pylintdb.RawPassageConstPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pylintdb.RawPassageConstPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pylintdb.RawPassageConstPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pylintdb.RawPassageConstPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pylintdb.RawPassageConstPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pylintdb.RawPassageConstPtrVector___setitem__(self, *args)

    def pop(self):
        return _pylintdb.RawPassageConstPtrVector_pop(self)

    def append(self, x):
        return _pylintdb.RawPassageConstPtrVector_append(self, x)

    def empty(self):
        return _pylintdb.RawPassageConstPtrVector_empty(self)

    def size(self):
        return _pylintdb.RawPassageConstPtrVector_size(self)

    def swap(self, v):
        return _pylintdb.RawPassageConstPtrVector_swap(self, v)

    def begin(self):
        return _pylintdb.RawPassageConstPtrVector_begin(self)

    def end(self):
        return _pylintdb.RawPassageConstPtrVector_end(self)

    def rbegin(self):
        return _pylintdb.RawPassageConstPtrVector_rbegin(self)

    def rend(self):
        return _pylintdb.RawPassageConstPtrVector_rend(self)

    def clear(self):
        return _pylintdb.RawPassageConstPtrVector_clear(self)

    def get_allocator(self):
        return _pylintdb.RawPassageConstPtrVector_get_allocator(self)

    def pop_back(self):
        return _pylintdb.RawPassageConstPtrVector_pop_back(self)

    def erase(self, *args):
        return _pylintdb.RawPassageConstPtrVector_erase(self, *args)

    def __init__(self, *args):
        _pylintdb.RawPassageConstPtrVector_swiginit(self, _pylintdb.new_RawPassageConstPtrVector(*args))

    def push_back(self, x):
        return _pylintdb.RawPassageConstPtrVector_push_back(self, x)

    def front(self):
        return _pylintdb.RawPassageConstPtrVector_front(self)

    def back(self):
        return _pylintdb.RawPassageConstPtrVector_back(self)

    def assign(self, n, x):
        return _pylintdb.RawPassageConstPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _pylintdb.RawPassageConstPtrVector_resize(self, *args)

    def insert(self, *args):
        return _pylintdb.RawPassageConstPtrVector_insert(self, *args)

    def reserve(self, n):
        return _pylintdb.RawPassageConstPtrVector_reserve(self, n)

    def capacity(self):
        return _pylintdb.RawPassageConstPtrVector_capacity(self)
    __swig_destroy__ = _pylintdb.delete_RawPassageConstPtrVector

# Register RawPassageConstPtrVector in _pylintdb:
_pylintdb.RawPassageConstPtrVector_swigregister(RawPassageConstPtrVector)

class SearchResultVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pylintdb.SearchResultVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pylintdb.SearchResultVector___nonzero__(self)

    def __bool__(self):
        return _pylintdb.SearchResultVector___bool__(self)

    def __len__(self):
        return _pylintdb.SearchResultVector___len__(self)

    def __getslice__(self, i, j):
        return _pylintdb.SearchResultVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pylintdb.SearchResultVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pylintdb.SearchResultVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pylintdb.SearchResultVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pylintdb.SearchResultVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pylintdb.SearchResultVector___setitem__(self, *args)

    def pop(self):
        return _pylintdb.SearchResultVector_pop(self)

    def append(self, x):
        return _pylintdb.SearchResultVector_append(self, x)

    def empty(self):
        return _pylintdb.SearchResultVector_empty(self)

    def size(self):
        return _pylintdb.SearchResultVector_size(self)

    def swap(self, v):
        return _pylintdb.SearchResultVector_swap(self, v)

    def begin(self):
        return _pylintdb.SearchResultVector_begin(self)

    def end(self):
        return _pylintdb.SearchResultVector_end(self)

    def rbegin(self):
        return _pylintdb.SearchResultVector_rbegin(self)

    def rend(self):
        return _pylintdb.SearchResultVector_rend(self)

    def clear(self):
        return _pylintdb.SearchResultVector_clear(self)

    def get_allocator(self):
        return _pylintdb.SearchResultVector_get_allocator(self)

    def pop_back(self):
        return _pylintdb.SearchResultVector_pop_back(self)

    def erase(self, *args):
        return _pylintdb.SearchResultVector_erase(self, *args)

    def __init__(self, *args):
        _pylintdb.SearchResultVector_swiginit(self, _pylintdb.new_SearchResultVector(*args))

    def push_back(self, x):
        return _pylintdb.SearchResultVector_push_back(self, x)

    def front(self):
        return _pylintdb.SearchResultVector_front(self)

    def back(self):
        return _pylintdb.SearchResultVector_back(self)

    def assign(self, n, x):
        return _pylintdb.SearchResultVector_assign(self, n, x)

    def resize(self, *args):
        return _pylintdb.SearchResultVector_resize(self, *args)

    def insert(self, *args):
        return _pylintdb.SearchResultVector_insert(self, *args)

    def reserve(self, n):
        return _pylintdb.SearchResultVector_reserve(self, n)

    def capacity(self):
        return _pylintdb.SearchResultVector_capacity(self)
    __swig_destroy__ = _pylintdb.delete_SearchResultVector

# Register SearchResultVector in _pylintdb:
_pylintdb.SearchResultVector_swigregister(SearchResultVector)

class RawPassage(object):
    r"""
    RawPassage is a simple struct to hold the raw passage data.

    This represents a document before it's indexed.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    embedding_block = property(_pylintdb.RawPassage_embedding_block_get, _pylintdb.RawPassage_embedding_block_set, doc=r"""
    embedding_block contains the document's embeddings.
    this is an array, and can be any number of embeddings, but they'll all
    be indexed together.
    """)
    id = property(_pylintdb.RawPassage_id_get, _pylintdb.RawPassage_id_set, doc=r"""
    id is a unique identifier for the document or passage.
    it must be an integer. we enable document ids to be strings that we can
    lookup after retrieval.
    """)

    def __init__(self, *args):
        _pylintdb.RawPassage_swiginit(self, _pylintdb.new_RawPassage(*args))
    __swig_destroy__ = _pylintdb.delete_RawPassage

# Register RawPassage in _pylintdb:
_pylintdb.RawPassage_swigregister(RawPassage)

IndexEncoding_NONE = _pylintdb.IndexEncoding_NONE
IndexEncoding_BINARIZER = _pylintdb.IndexEncoding_BINARIZER
IndexEncoding_PRODUCT_QUANTIZER = _pylintdb.IndexEncoding_PRODUCT_QUANTIZER
class SearchOptions(object):
    r"""
    SearchOptions enables custom searching behavior.

    These options expose ways to tradeoff recall and latency at different levels
    of retrieval. Searching more centroids:
    - decrease centroid_score_threshold and increase k_top_centroids.
    - increase n_probe in search()

    Decreasing latency:
    - increase centroid_score_threshold and decrease k_top_centroids.
    - decrease n_probe in search()
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    expected_id = property(_pylintdb.SearchOptions_expected_id_get, _pylintdb.SearchOptions_expected_id_set)
    centroid_score_threshold = property(_pylintdb.SearchOptions_centroid_score_threshold_get, _pylintdb.SearchOptions_centroid_score_threshold_set, doc=r"""
    expects a document id in the return result.
    prints additional information during execution.
    useful for debugging.
    """)
    k_top_centroids = property(_pylintdb.SearchOptions_k_top_centroids_get, _pylintdb.SearchOptions_k_top_centroids_set, doc=r""" the threshold for centroid scores.""")
    num_second_pass = property(_pylintdb.SearchOptions_num_second_pass_get, _pylintdb.SearchOptions_num_second_pass_set, doc=r""" the number of top centroids to consider.""")

    def __init__(self):
        r""" the number of second pass candidates to consider."""
        _pylintdb.SearchOptions_swiginit(self, _pylintdb.new_SearchOptions())
    __swig_destroy__ = _pylintdb.delete_SearchOptions

# Register SearchOptions in _pylintdb:
_pylintdb.SearchOptions_swigregister(SearchOptions)

class SearchResult(object):
    r"""SearchResult is a simple struct to hold the results of a search."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_pylintdb.SearchResult_id_get, _pylintdb.SearchResult_id_set)
    score = property(_pylintdb.SearchResult_score_get, _pylintdb.SearchResult_score_set)

    def __init__(self):
        _pylintdb.SearchResult_swiginit(self, _pylintdb.new_SearchResult())
    __swig_destroy__ = _pylintdb.delete_SearchResult

# Register SearchResult in _pylintdb:
_pylintdb.SearchResult_swigregister(SearchResult)

class Configuration(object):
    r"""Configuration of the Index."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nlist = property(_pylintdb.Configuration_nlist_get, _pylintdb.Configuration_nlist_set)
    nbits = property(_pylintdb.Configuration_nbits_get, _pylintdb.Configuration_nbits_set, doc=r""" the number of centroids to train.""")
    niter = property(_pylintdb.Configuration_niter_get, _pylintdb.Configuration_niter_set, doc=r""" the number of bits to use in residual compression.""")
    dim = property(_pylintdb.Configuration_dim_get, _pylintdb.Configuration_dim_set, doc=r""" the number of iterations to use during training.""")
    num_subquantizers = property(_pylintdb.Configuration_num_subquantizers_get, _pylintdb.Configuration_num_subquantizers_set, doc=r""" the dimensions expected for incoming vectors.""")
    quantizer_type = property(_pylintdb.Configuration_quantizer_type_get, _pylintdb.Configuration_quantizer_type_set, doc=r""" the number of subquantizers to use in the product quantizer.""")

    def __eq__(self, other):
        r""" whether to compress residuals."""
        return _pylintdb.Configuration___eq__(self, other)

    def __init__(self):
        _pylintdb.Configuration_swiginit(self, _pylintdb.new_Configuration())
    __swig_destroy__ = _pylintdb.delete_Configuration

# Register Configuration in _pylintdb:
_pylintdb.Configuration_swigregister(Configuration)
cvar = _pylintdb.cvar
METADATA_FILENAME = cvar.METADATA_FILENAME

class IndexIVF(object):
    r"""
    IndexIVF is a multi vector index with an inverted file structure.

    This relies on pretrained centroids to accurately retrieve the closest
    documents.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    config = property(_pylintdb.IndexIVF_config_get, _pylintdb.IndexIVF_config_set)
    read_only = property(_pylintdb.IndexIVF_read_only_get, _pylintdb.IndexIVF_read_only_set)

    def __init__(self, *args):
        r"""
        *Overload 1:*
         whether to open the index in read-only mode.
         load an existing index.

        |

        *Overload 2:*

        Copy creates a new index at the given path from a trained index. The copy
        will always be writeable.

        Will throw an exception if the index isn't trained when this method is
        called.

        :type path: string
        :param path: the path to initialize the index.
        """
        _pylintdb.IndexIVF_swiginit(self, _pylintdb.new_IndexIVF(*args))

    def train(self, embeddings):
        return _pylintdb.IndexIVF_train(self, embeddings)

    def set_centroids(self, data):
        r"""
        set_centroids overwrites the centroids in the encoder.

        This is useful if you want to parallelize index writing and merge indices
        later.
        """
        return _pylintdb.IndexIVF_set_centroids(self, data)

    def set_weights(self, weights, cutoffs, avg_residual):
        r"""
        set_weights overwrites the compression weights in the encoder, if using
        compression.
        """
        return _pylintdb.IndexIVF_set_weights(self, weights, cutoffs, avg_residual)

    def search(self, *args):
        r"""
        search will find the nearest neighbors for a vector block.

        :type tenant: int
        :param tenant: the tenant the document belongs to.
        :param block: the block of embeddings to search.
        :type n_probe: int
        :param n_probe: the number of centroids to search.
        :type k: int
        :param k: the top k results to return.
        :type opts: :py:class:`SearchOptions`, optional
        :param opts: any search options to use during searching.
        """
        return _pylintdb.IndexIVF_search(self, *args)

    def add(self, tenant, docs):
        r"""
        Add will add a block of embeddings to the index.

        :type tenant: int
        :param tenant: the tenant to assign the document to.
        :type docs: std::vector< lintdb::RawPassage,std::allocator< lintdb::RawPassage > >
        :param docs: a vector of RawPassages. This includes embeddings and ids.
        """
        return _pylintdb.IndexIVF_add(self, tenant, docs)

    def add_single(self, tenant, doc):
        r"""Add a single document."""
        return _pylintdb.IndexIVF_add_single(self, tenant, doc)

    def remove(self, tenant, ids):
        r"""
        Remove deletes documents from the index by id.

        void remove(const std::vector<int64_t>& ids) works if SWIG complains
        about idx_t.
        """
        return _pylintdb.IndexIVF_remove(self, tenant, ids)

    def update(self, tenant, docs):
        r"""Update is a convenience function for remove and add."""
        return _pylintdb.IndexIVF_update(self, tenant, docs)

    def merge(self, path):
        r"""
        Merge will combine the index with another index.

        We verify that the configuration of each index is correct, but this
        doesn't prevent you from merging indices with different centroids. There
        will be subtle ways for this to break, but this can enable easier
        multiprocess building of indices.
        """
        return _pylintdb.IndexIVF_merge(self, path)

    def save(self):
        r"""
        Index should be able to resume from a previous state.
        Any quantization and compression will be saved within the Index's path.

        Inverted lists are persisted to the database.
        """
        return _pylintdb.IndexIVF_save(self)
    __swig_destroy__ = _pylintdb.delete_IndexIVF

# Register IndexIVF in _pylintdb:
_pylintdb.IndexIVF_swigregister(IndexIVF)



